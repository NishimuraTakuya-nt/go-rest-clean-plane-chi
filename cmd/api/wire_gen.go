// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/adapters/primary/http/handlers"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/adapters/primary/http/routes"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/adapters/primary/http/routes/v1"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/adapters/secondary/piyographql"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/core/usecases"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/infrastructure/auth"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/infrastructure/logger"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/infrastructure/telemetry"
	"net/http"
)

import (
	_ "github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/docs/swagger"
)

// Injectors from wire.go:

func InitializeAPI() (http.Handler, func(), error) {
	loggerLogger := logger.NewLogger()
	healthcheckHandler := handlers.NewHealthcheckHandler(loggerLogger)
	healthcheckRouter := v1.NewHealthcheckRouter(healthcheckHandler)
	tokenService := auth.NewTokenService()
	authUsecase := usecases.NewAuthUsecase(tokenService)
	authHandler := handlers.NewAuthHandler(loggerLogger, authUsecase)
	authRouter := v1.NewAuthRouter(authHandler)
	client := piyographql.NewClient(loggerLogger)
	sampleUsecase := usecases.NewSampleUsecase(loggerLogger, client)
	sampleHandler := handlers.NewSampleHandler(loggerLogger, sampleUsecase)
	sampleRouter := v1.NewSampleRouter(sampleHandler)
	telemetryProvider, err := telemetry.InitTelemetry()
	if err != nil {
		return nil, nil, err
	}
	handler, cleanup := routes.NewRouter(healthcheckRouter, authRouter, authUsecase, sampleRouter, telemetryProvider)
	return handler, func() {
		cleanup()
	}, nil
}
