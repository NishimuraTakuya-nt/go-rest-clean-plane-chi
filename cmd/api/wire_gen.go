// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/adapters/primary/http/custommiddleware"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/adapters/primary/http/handlers"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/adapters/primary/http/presenter"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/adapters/primary/http/routes"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/adapters/primary/http/routes/v1"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/adapters/secondary/piyographql"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/core/usecases"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/infrastructure/auth"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/infrastructure/config"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/infrastructure/logger"
	"github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/internal/infrastructure/telemetry/datadog"
)

import (
	_ "github.com/NishimuraTakuya-nt/go-rest-clean-plane-chi/docs/swagger"
)

// Injectors from wire.go:

func InitializeRouter(cfg *config.AppConfig, logger2 logger.Logger, metricsManager *datadog.MetricsManager) (*routes.Router, error) {
	ddTracer := custommiddleware.NewDDTracer(logger2)
	ddMetrics := custommiddleware.NewMetrics(logger2, metricsManager)
	jsonWriter := presenter.NewJSONWriter(logger2)
	errorHandling := custommiddleware.NewErrorHandling(logger2, jsonWriter)
	timeout := custommiddleware.NewTimeout(logger2, cfg)
	tokenService := auth.NewTokenService(cfg)
	authUsecase := usecases.NewAuthUsecase(tokenService)
	authentication := custommiddleware.NewAuthentication(logger2, jsonWriter, authUsecase)
	healthcheckHandler := handlers.NewHealthcheckHandler(logger2, jsonWriter)
	healthcheckRouter := v1.NewHealthcheckRouter(healthcheckHandler)
	authHandler := handlers.NewAuthHandler(logger2, jsonWriter, authUsecase)
	authRouter := v1.NewAuthRouter(authHandler)
	client := piyographql.NewClient(logger2)
	sampleUsecase := usecases.NewSampleUsecase(logger2, client)
	sampleHandler := handlers.NewSampleHandler(logger2, jsonWriter, sampleUsecase)
	sampleRouter := v1.NewSampleRouter(sampleHandler)
	router := routes.NewRouter(cfg, ddTracer, ddMetrics, errorHandling, timeout, authentication, healthcheckRouter, authRouter, sampleRouter)
	return router, nil
}
